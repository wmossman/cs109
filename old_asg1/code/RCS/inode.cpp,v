head	1.3;
access;
symbols;
locks;
comment	@// @;


1.3
date	2014.03.27.01.39.40;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.03.27.00.15.54;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.06.19.00.31.28;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: inode.cpp,v 1.2 2014-03-26 17:15:54-07 - - $

#include <cassert>
#include <iostream>

using namespace std;

#include "debug.h"
#include "inode.h"

int inode::next_inode_nr = 1;

inode::inode(inode_t init_type):
   inode_nr (next_inode_nr++), type (init_type)
{
   switch (type) {
      case DIR_INODE:
           contents.dirents = new directory();
           break;
      case FILE_INODE:
           contents.data = new wordvec();
           break;
   }
   DEBUGF ('i', "inode " << inode_nr << ", type = " << type);
}

//
// copy ctor -
//    Make a copy of a given inode.  This should not be used in
//    your program if you can avoid it, since it is expensive.
//    Here, we can leverage operator=.
//
inode::inode (const inode& that) {
   *this = that;
}

//
// operator= -
//    Assignment operator.  Copy an inode.  Make a copy of a
//    given inode.  This should not be used in your program if
//    you can avoid it, since it is expensive.
//
inode& inode::operator= (const inode& that) {
   if (this != &that) {
      inode_nr = that.inode_nr;
      type = that.type;
      contents = that.contents;
   }
   DEBUGF ('i', "inode " << inode_nr << ", type = " << type);
   return *this;
}


int inode::get_inode_nr() const {
   DEBUGF ('i', "inode = " << inode_nr);
   return inode_nr;
}

int inode::size() const {
   int size = 0;
   DEBUGF ('i', "size = " << size);
   return size;
}

const wordvec& inode::readfile() const {
   DEBUGF ('i', *contents.data);
   assert (type == FILE_INODE);
   return *contents.data;
}

void inode::writefile (const wordvec& words) {
   DEBUGF ('i', words);
   assert (type == FILE_INODE);
}

void inode::remove (const string& filename) {
   DEBUGF ('i', filename);
   assert (type == DIR_INODE);
}

inode_state::inode_state(): root (NULL), cwd (NULL), prompt ("%") {
   DEBUGF ('i', "root = " << (void*) root << ", cwd = " << (void*) cwd
          << ", prompt = " << prompt);
}

ostream& operator<< (ostream& out, const inode_state& state) {
   out << "inode_state: root = " << state.root
       << ", cwd = " << state.cwd;
   return out;
}

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.1 2013-06-18 17:31:28-07 - - $
d8 1
a8 1
#include "trace.h"
d24 1
a24 1
   TRACE ('i', "inode " << inode_nr << ", type = " << type);
d49 1
a49 1
   TRACE ('i', "inode " << inode_nr << ", type = " << type);
d55 1
a55 1
   TRACE ('i', "inode = " << inode_nr);
d61 1
a61 1
   TRACE ('i', "size = " << size);
d66 1
a66 1
   TRACE ('i', *contents.data);
d72 1
a72 1
   TRACE ('i', words);
d77 1
a77 1
   TRACE ('i', filename);
d82 1
a82 1
   TRACE ('i', "root = " << (void*) root << ", cwd = " << (void*) cwd
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.3 2013-01-11 16:56:29-08 - - $
d33 1
a33 1
inode::inode (const inode &that) {
d43 1
a43 1
inode &inode::operator= (const inode &that) {
d65 1
a65 1
const wordvec &inode::readfile() const {
d71 1
a71 1
void inode::writefile (const wordvec &words) {
d76 1
a76 1
void inode::remove (const string &filename) {
d86 1
a86 1
ostream &operator<< (ostream &out, const inode_state &state) {
@
