head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2015.07.08.19.32.13;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.07.02.23.48.18;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.07.02.01.52.26;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.07.02.01.47.50;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.02.01.40.41;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: general.h,v 1.4 2015-07-02 16:48:18-07 - - $

//
// general -
//    A general utility class to provide various services
//    not conveniently included in other modules.
//

#ifndef __UTIL_H__
#define __UTIL_H__

#include <iomanip>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include <vector>
using namespace std;

#include "debug.h"

//
// ydc_exn -
//    Indicate a problem where processing should be abandoned and
//    the main function should take control.
//

class ydc_exn: public runtime_error {
   public:
      explicit ydc_exn (const string& what);
};

//
// octal -
//    Convert integer to octal string.
//

template <typename numeric>
const string octal (numeric number) {
   ostringstream stream;
   stream << showbase << oct << number;
   return stream.str();
}


//
// main -
//    Keep track of execname and exit status.  Must be initialized
//    as the first thing done inside main.  Main should call:
//       main::execname (argv[0]);
//    before anything else.
//

class exec {
   private:
      static string execname_;
      static int status_;
      static void execname (const string& argv0);
      friend int main (int, char**);
   public:
      static void status (int status);
      static const string& execname() {return execname_; }
      static int status() {return status_; }
};

//
// complain -
//    Used for starting error messages.  Sets the exit status to
//    EXIT_FAILURE, writes the program name to cerr, and then
//    returns the cerr ostream.  Example:
//       complain() << filename << ": some problem" << endl;
//

ostream& note();
ostream& error();

#endif

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: general.h,v 1.3 2015-07-01 18:52:26-07 - - $
d60 1
a61 1
      static void status (int status) {status_ = status; }
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: general.h,v 1.2 2015-07-01 18:47:50-07 - - $
d46 1
a46 1
// sys_info -
d49 1
a49 1
//       sys_info::execname (argv[0]);
d53 1
a53 1
class sys_info {
d73 2
a74 19
ostream& complain();

//
// operator<< (vector) -
//    An overloaded template operator which allows vectors to be
//    printed out as a single operator, each element separated from
//    the next with spaces.  The item_t must have an output operator
//    defined for it.
//

template <typename item_t>
ostream& operator<< (ostream& out, const vector<item_t>& vec){
   string space = "";
   for (const auto& elem: vec) {
      out << space << elem; 
      space = " ";
   }
   return out;
}
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: general.h,v 1.1 2015-07-01 18:40:41-07 - - $
d44 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: util.h,v 1.8 2015-07-01 13:24:32-07 - - $
a43 1

@
